# -*- coding: utf-8 -*-
"""CNN1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_oE-qL0nLJYS-m5z1P4apBU3nfgnjAN_

Linkar o Google Drive no Colab
"""

from google.colab import drive
drive.mount('/content/drive')

"""Criar a Rede Neural"""

import tensorflow as tf  # Biblioteca para criar a rede neural
from tensorflow import keras
from keras import layers
import matplotlib.pyplot as plt  # Para visualizar imagens
import numpy as np  # Para manipulação de arrays
import matplotlib.pyplot as plt  # Para visualizar imagens
import os  # Para trabalhar com diretórios
import tensorflow as tf  # Biblioteca para criar a rede neural
from tensorflow import keras


# Definir o caminho do dataset
dataset_path = "/content/drive/MyDrive/6 PERIODO/Eng. do Produto/Dataset_Separado"

# Criar os datasets de treino, teste e validação
train_dataset = keras.preprocessing.image_dataset_from_directory(
    os.path.join(dataset_path, "train"),
    image_size=(227, 227),
    batch_size=32,
    shuffle=True,
    label_mode='binary')

test_dataset = keras.preprocessing.image_dataset_from_directory(
    os.path.join(dataset_path, "test"),
    image_size=(227, 227),
    batch_size=32,
    shuffle=True,
    label_mode='binary')

validation_dataset = keras.preprocessing.image_dataset_from_directory(
    os.path.join(dataset_path, "validation"),
    image_size=(227, 227),
    batch_size=32,
    shuffle=True,
    label_mode='binary')


# Criando a CNN
model = keras.Sequential([

    # Camada 1: Convolução + Pooling + Dropout
    layers.Conv2D(32, (3,3), activation='relu', input_shape=(227, 227, 3)),
    layers.MaxPooling2D(2,2), layers.Dropout(0.2),

    # Camada 2: Convolução + Pooling + Dropout
    layers.Conv2D(64, (3,3), activation='relu'),
    layers.MaxPooling2D(2,2), layers.Dropout(0.2),

    # Camada 3: Convolução + Pooling
    layers.Conv2D(128, (3,3), activation='relu'),
    layers.MaxPooling2D(2,2), #Não precisa colocar dropout antes da flatten

    # Camada 4: Flatten (Achatar as Matrizes)
    layers.Flatten(),

    # Camada 5: Fully Connected (Densa)
    layers.Dense(512, activation='relu'),

    # Camada 6: Saída (2 classes: com fissura ou sem fissura)
    layers.Dense(1, activation='sigmoid')])

model.compile(
    loss="binary_crossentropy",
    optimizer="adam",
    metrics=["accuracy"])

"""Imprimir o nome das classes / Imprimir as classes com imagens"""

print(train_dataset.class_names)
print(test_dataset.class_names)
print(validation_dataset.class_names)

plt.figure(figsize=(10, 10))
for images, labels in train_dataset.take(1):
  for i in range(9):
    ax = plt.subplot(3, 3, i + 1)
    plt.imshow(images[i].numpy().astype("uint8"))
    plt.title(train_dataset.class_names[labels[i]])
    plt.axis("off")
plt.show()

"""Treinar o modelo"""

history = model.fit(
    train_dataset,
    validation_data=validation_dataset,
    epochs=10
)

"""Avaliar o modelo"""

loss, accuracy = model.evaluate(test_dataset)
print(f"Acurácia: {accuracy * 100:.2f}%")

"""Segunda Avaliação para teste de Acurácia"""

loss, accuracy = model.evaluate(test_dataset)
print(f"Acurácia: {accuracy * 100:.2f}%")

"""Salvar o modelo"""

import os
os.listdir()

"""Baixando o modelo usando o Keras"""

model.save('/content/drive/MyDrive/fissuras227x227.keras')

"""OBSERVAÇÕES -----

Pontos Positivos:

*   Organização: O código está bem organizado, com seções separadas para carregar o dataset, criar o modelo, treinar e avaliar.
*   Uso de Keras: Você está usando a biblioteca Keras, que é uma ótima escolha para construir e treinar modelos de deep learning de forma fácil e eficiente.
*   Arquitetura do Modelo: A arquitetura da CNN parece adequada para a tarefa de classificação de imagens, com camadas convolucionais, pooling, dropout e camadas densas.
*   Uso de Data Augmentation: Você está usando data augmentation para aumentar a quantidade de dados de treinamento e melhorar a generalização do modelo.
*   Avaliação do Modelo: Você está avaliando o modelo usando o dataset de teste e calculando a acurácia, que é uma métrica importante para tarefas de classificação.

Sugestões de Melhoria:

*   Ajuste de Hiperparâmetros: Você pode experimentar ajustar os hiperparâmetros do modelo, como a taxa de aprendizado, o número de épocas de treinamento e o tamanho do batch, para tentar melhorar o desempenho.
*   Regularização: Você pode adicionar técnicas de regularização, como L1 ou L2, para evitar overfitting e melhorar a generalização do modelo.
*   Visualização: Você pode visualizar as curvas de aprendizado (loss e acurácia) durante o treinamento para monitorar o progresso e identificar problemas como overfitting ou underfitting.
*   Transfer Learning: Você pode considerar usar transfer learning, que consiste em usar um modelo pré-treinado em um conjunto de dados grande e adaptá-lo para sua tarefa específica. Isso pode acelerar o treinamento e melhorar o desempenho.


Código com Sugestões:

```
# ... (código original) ...

# Ajuste de Hiperparâmetros
optimizer = keras.optimizers.Adam(learning_rate=0.001)  # Ajuste da taxa de aprendizado
model.compile(loss="binary_crossentropy", optimizer=optimizer, metrics=["accuracy"])

# Regularização
layers.Conv2D(32, (3, 3), activation='relu', input_shape=(227, 227, 3), kernel_regularizer=keras.regularizers.l2(0.01))  # Regularização L2

# Visualização
history = model.fit(train_dataset, validation_data=validation_dataset, epochs=10)
plt.plot(history.history['accuracy'], label='accuracy')
plt.plot(history.history['val_accuracy'], label='val_accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.legend(loc='lower right')
plt.show()

# Transfer Learning (exemplo com ResNet50)
base_model = keras.applications.ResNet50(weights='imagenet', include_top=False, input_shape=(227, 227, 3))
x = base_model.output
x = layers.GlobalAveragePooling2D()(x)
x = layers.Dense(1024, activation='relu')(x)
predictions = layers.Dense(1, activation='sigmoid')(x)
model = keras.Model(inputs=base_model.input, outputs=predictions)
model.compile(loss="binary_crossentropy", optimizer=optimizer, metrics=["accuracy"])

# ... (restante do código) ...
```


"""

